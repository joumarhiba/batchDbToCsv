package fr.cnamts.ex.batch.tasklet;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.StepExecutionListener;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;

public class ValiderExistReperTasklet  implements Tasklet, StepExecutionListener{
	/** logger */
	private static final Logger LOGGER = LoggerFactory.getLogger(ValiderExistReperTasklet.class);

	//	TODO -verifier exsitences de repertoires
	//	UFichier.isNonexiste(this.repertoireEntree)
	//	-verifier existence et le format de fichier entree

	/** Step execution du batch. */
	private transient StepExecution stepExecution;

	/** Job execution du batch. */
	private transient JobExecution jobExecution;





	/**
	 * permet d'arreter le batch
	 */
	private void arreterBatch() {
		this.stepExecution.getExecutionContext().put("ERREUR_BLOQUANTE", Boolean.TRUE);
		this.stepExecution.setTerminateOnly();
	}





	@Override
	public RepeatStatus execute(StepContribution arg0, ChunkContext arg1) throws Exception {
		// TODO Auto-generated method stub
		this.stepExecution.getJobExecution().getExecutionContext().put("ERREUR_BLOQUANTE", Boolean.TRUE);
		
		return null;
	}





	@Override
	public ExitStatus afterStep(StepExecution arg0) {
		// TODO Auto-generated method stub
		return null;
	}





	@Override
	public void beforeStep(StepExecution pStepExecution) {
		
		this.stepExecution= pStepExecution;
		
	}





}
